### YamlMime:PowershellCmdlet
summary: |-
  Add or remove licenses for the user to enable or disable their use of Microsoft cloud offerings.
  For example, an organization can have a Microsoft 365 Enterprise E3 subscription with 100 licenses, and this request assigns one of those licenses to a specific user.
  You can also enable and disable specific plans associated with a subscription.
  To learn more about subscriptions and licenses, see this Technet article.
  To get the subscriptions available in the directory, perform a GET subscribedSkus request.

  > [!NOTE]
  > To view the v1.0 release of this cmdlet, view [Set-MgUserLicense](/powershell/module/Microsoft.Graph.Users.Actions/Set-MgUserLicense?view=graph-powershell-v1.0)
module: Microsoft.Graph.Beta.Users.Actions
notes: |-
  ALIASES

  COMPLEX PARAMETER PROPERTIES

  To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.


  `ADDLICENSES <IMicrosoftGraphAssignedLicense[]>`: .
    - `[DisabledPlans <String[]>]`: A collection of the unique identifiers for plans that have been disabled.
    - `[SkuId <String>]`: The unique identifier for the SKU.

  `BODYPARAMETER <IComponents103UmuuRequestbodiesAssignlicenserequestbodyContentApplicationJsonSchema>`: .
    - `[(Any) <Object>]`: This indicates any property can be added to this object.
    - `[AddLicenses <IMicrosoftGraphAssignedLicense[]>]`: 
      - `[DisabledPlans <String[]>]`: A collection of the unique identifiers for plans that have been disabled.
      - `[SkuId <String>]`: The unique identifier for the SKU.
    - `[RemoveLicenses <String[]>]`: 

  `INPUTOBJECT <IUsersActionsIdentity>`: Identity Parameter
    - `[AccessReviewInstanceId <String>]`: The unique identifier of accessReviewInstance
    - `[AccessReviewStageId <String>]`: The unique identifier of accessReviewStage
    - `[AppLogCollectionRequestId <String>]`: The unique identifier of appLogCollectionRequest
    - `[AuthenticationMethodId <String>]`: The unique identifier of authenticationMethod
    - `[CalendarId <String>]`: The unique identifier of calendar
    - `[ChatId <String>]`: The unique identifier of chat
    - `[ChatMessageId <String>]`: The unique identifier of chatMessage
    - `[ChatMessageId1 <String>]`: The unique identifier of chatMessage
    - `[CloudPcId <String>]`: The unique identifier of cloudPC
    - `[ContentTypeId <String>]`: The unique identifier of contentType
    - `[DeviceEnrollmentConfigurationId <String>]`: The unique identifier of deviceEnrollmentConfiguration
    - `[DeviceId <String>]`: The unique identifier of device
    - `[DeviceLogCollectionResponseId <String>]`: The unique identifier of deviceLogCollectionResponse
    - `[DocumentSetVersionId <String>]`: The unique identifier of documentSetVersion
    - `[DriveId <String>]`: The unique identifier of drive
    - `[DriveItemId <String>]`: The unique identifier of driveItem
    - `[DriveItemVersionId <String>]`: The unique identifier of driveItemVersion
    - `[EventId <String>]`: The unique identifier of event
    - `[EventId1 <String>]`: The unique identifier of event
    - `[ListItemId <String>]`: The unique identifier of listItem
    - `[ListItemVersionId <String>]`: The unique identifier of listItemVersion
    - `[MailFolderId <String>]`: The unique identifier of mailFolder
    - `[MailFolderId1 <String>]`: The unique identifier of mailFolder
    - `[ManagedDeviceId <String>]`: The unique identifier of managedDevice
    - `[MessageId <String>]`: The unique identifier of message
    - `[MobileAppTroubleshootingEventId <String>]`: The unique identifier of mobileAppTroubleshootingEvent
    - `[NotebookId <String>]`: The unique identifier of notebook
    - `[OnenotePageId <String>]`: The unique identifier of onenotePage
    - `[OnenoteSectionId <String>]`: The unique identifier of onenoteSection
    - `[OutlookTaskFolderId <String>]`: The unique identifier of outlookTaskFolder
    - `[OutlookTaskGroupId <String>]`: The unique identifier of outlookTaskGroup
    - `[OutlookTaskId <String>]`: The unique identifier of outlookTask
    - `[PermissionId <String>]`: The unique identifier of permission
    - `[ResourceSpecificPermissionGrantId <String>]`: The unique identifier of resourceSpecificPermissionGrant
    - `[SensitivityLabelId <String>]`: The unique identifier of sensitivityLabel
    - `[SubscriptionId <String>]`: The unique identifier of subscription
    - `[TeamsAppInstallationId <String>]`: The unique identifier of teamsAppInstallation
    - `[TodoTaskId <String>]`: The unique identifier of todoTask
    - `[TodoTaskListId <String>]`: The unique identifier of todoTaskList
    - `[UserId <String>]`: The unique identifier of user
inputs:
- name: <xref href="Microsoft.Graph.Beta.PowerShell.Models.IComponents103UmuuRequestbodiesAssignlicenserequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Graph.Beta.PowerShell.Models.IUsersActionsIdentity" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Graph.Beta.PowerShell.Models.IMicrosoftGraphUser" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Set-MgUserLicense
  href: /powershell/module/Microsoft.Graph.Users.Actions/Set-MgUserLicense?view=graph-powershell-v1.0
syntaxes:
- >-
  Set-MgBetaUserLicense -UserId <String> [-AddLicenses <IMicrosoftGraphAssignedLicense[]>]

   [-AdditionalProperties <Hashtable>] [-RemoveLicenses <String[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-MgBetaUserLicense -UserId <String>

   -BodyParameter <IComponents103UmuuRequestbodiesAssignlicenserequestbodyContentApplicationJsonSchema> [-WhatIf]

   [-Confirm] [<CommonParameters>]
- >-
  Set-MgBetaUserLicense -InputObject <IUsersActionsIdentity> [-AddLicenses <IMicrosoftGraphAssignedLicense[]>]

   [-AdditionalProperties <Hashtable>] [-RemoveLicenses <String[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-MgBetaUserLicense -InputObject <IUsersActionsIdentity>

   -BodyParameter <IComponents103UmuuRequestbodiesAssignlicenserequestbodyContentApplicationJsonSchema> [-WhatIf]

   [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Assign a license to a user'
  code: |-
    Connect-Graph -Scopes User.ReadWrite.All, Organization.Read.All

    $EmsSku = Get-MgBetaSubscribedSku -All | Where SkuPartNumber -eq 'EMSPREMIUM'

    Set-MgBetaUserLicense -UserId '38955658-c844-4f59-9430-6519430ac89b' -AddLicenses @{SkuId = $EmsSku.SkuId} -RemoveLicenses @()

    Id                                   DisplayName   Mail UserPrincipalName                     UserType
    --                                   -----------   ---- -----------------                     --------
    38955658-c844-4f59-9430-6519430ac89b Bianca Pisani      BiancaP@contoso.onmicrosoft.com       Member
  description: |-
    This example assigns a license from the **EMSPREMIUM** (ENTERPRISE MOBILITY + SECURITY E5) licensing plan to the unlicensed user **38955658-c844-4f59-9430-6519430ac89b**. For more information, see [assign licenses to users accounts with PowerShell](/microsoft-365/enterprise/assign-licenses-to-user-accounts-with-microsoft-365-powershell?view=o365-worldwide).
  summary: ""
- title: 'Example 2: Assign more than one licenses to a user'
  code: |-
    Connect-Graph -Scopes User.ReadWrite.All, Organization.Read.All

    $EmsSku = Get-MgBetaSubscribedSku -All | Where SkuPartNumber -eq 'EMSPREMIUM'
    $FlowSku = Get-MgBetaSubscribedSku -All | Where SkuPartNumber -eq 'FLOW_FREE'
    $addLicenses = @(
      @{SkuId = $EmsSku.SkuId},
      @{SkuId = $FlowSku.SkuId}
      )

    Set-MgBetaUserLicense -UserId '38955658-c844-4f59-9430-6519430ac89b' -AddLicenses $addLicenses -RemoveLicenses @()

    Id                                   DisplayName   Mail UserPrincipalName                     UserType
    --                                   -----------   ---- -----------------                     --------
    38955658-c844-4f59-9430-6519430ac89b Bianca Pisani      BiancaP@contoso.onmicrosoft.com       Member
  description: |-
    This example assigns **EMSPREMIUM** and **FLOW_FREE** licenses to the user **38955658-c844-4f59-9430-6519430ac89b**.
  summary: ""
- title: 'Example 3: Assign a license to a user with some disabled plans'
  code: |-
    Connect-Graph -Scopes User.ReadWrite.All, Organization.Read.All

    $EmsSku = Get-MgBetaSubscribedSku -All | Where SkuPartNumber -eq 'EMSPREMIUM'
    $disabledPlans = $EmsSku.ServicePlans | where ServicePlanName -in ("MFA_PREMIUM", "INTUNE_A") | Select -ExpandProperty ServicePlanId
    $addLicenses = @(
      @{SkuId = $EmsSku.SkuId
      DisabledPlans = $disabledPlans
      }
      )

    Set-MgBetaUserLicense -UserId '38955658-c844-4f59-9430-6519430ac89b' -AddLicenses $addLicenses -RemoveLicenses @()

    Id                                   DisplayName   Mail UserPrincipalName                     UserType
    --                                   -----------   ---- -----------------                     --------
    38955658-c844-4f59-9430-6519430ac89b Bianca Pisani      BiancaP@contoso.onmicrosoft.com       Member
  description: |-
    This example assigns **EMSPREMIUM** license with the **MFA_PREMIUM** and **INTUNE_A** services turned off.
  summary: ""
- title: "Example 4: Update a license assigned to a user to add more disabled plans leaving the user's existing disabled plans in their current state"
  code: |-
    Connect-Graph -Scopes User.ReadWrite.All, Organization.Read.All

    $EmsSku = Get-MgBetaSubscribedSku -All | Where SkuPartNumber -eq 'EMSPREMIUM'
    $userLicense = Get-MgBetaUserLicenseDetail -UserId "38955658-c844-4f59-9430-6519430ac89b"

    $userDisabledPlans = $userLicense.ServicePlans |
      Where ProvisioningStatus -eq "Disabled" |
      Select -ExpandProperty ServicePlanId

    $newDisabledPlans = $EmsSku.ServicePlans |
      Where ServicePlanName -in ("AAD_PREMIUM_P2", "AAD_PREMIUM") |
      Select -ExpandProperty ServicePlanId

    $disabledPlans = $userDisabledPlans + $newDisabledPlans | Select -Unique

    $addLicenses = @(
      @{SkuId = $EmsSku.SkuId
      DisabledPlans = $disabledPlans
      }
      )

    Set-MgBetaUserLicense -UserId '38955658-c844-4f59-9430-6519430ac89b' -AddLicenses $addLicenses -RemoveLicenses @()

    Id                                   DisplayName   Mail UserPrincipalName                     UserType
    --                                   -----------   ---- -----------------                     --------
    38955658-c844-4f59-9430-6519430ac89b Bianca Pisani      BiancaP@contoso.onmicrosoft.com       Member
  description: |-
    This example updates the **EMSPREMIUM** license assigned to the user to add **AAD_PREMIUM_P2** and **AAD_PREMIUM** to the disabled services.
  summary: ""
- title: 'Example 5: Assign licenses to a user by copying the license assignment from another user'
  code: |-
    Connect-Graph -Scopes User.ReadWrite.All, Organization.Read.All

    Select-MgBetaProfile -Name Beta
    $mgUser = Get-MgBetaUser -UserId '38955658-c844-4f59-9430-6519430ac89b'

    Set-MgBetaUserLicense -UserId "82f51c98-7221-442f-8329-3faf9fe022f1" -AddLicenses $mgUser.AssignedLicenses -RemoveLicenses @()


    Id                                   DisplayName    Mail UserPrincipalName                      UserType
    --                                   -----------    ---- -----------------                      --------
    82f51c98-7221-442f-8329-3faf9fe022f1 Mallory Cortez      MalloryC@contoso.onmicrosoft.com       Member
  description: |-
    This examples copies the license assignment of user **38955658-c844-4f59-9430-6519430ac89b** and assigns it to user **82f51c98-7221-442f-8329-3faf9fe022f1**.
  summary: ""
- title: 'Example 6: Remove a license assigned to a user'
  code: |-
    Connect-Graph -Scopes User.ReadWrite.All, Organization.Read.All

    $EmsSku = Get-MgBetaSubscribedSku -All | Where SkuPartNumber -eq 'EMSPREMIUM'

    Set-MgBetaUserLicense -UserId "38955658-c844-4f59-9430-6519430ac89b" -AddLicenses @() -RemoveLicenses @($EmsSku.SkuId)

    Id                                   DisplayName   Mail UserPrincipalName                     UserType
    --                                   -----------   ---- -----------------                     --------
    38955658-c844-4f59-9430-6519430ac89b Bianca Pisani      BiancaP@contoso.onmicrosoft.com       Member
  description: |-
    This example removes the **EMSPREMIUM** license assignment from the user.
  summary: ""
parameters:
- type: <xref href="Hashtable" data-throw-if-not-resolved="False" />
  name: AdditionalProperties
  description: |+
    Additional Parameters

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IMicrosoftGraphAssignedLicense" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: AddLicenses
  description: |+
    .
    To construct, see NOTES section for ADDLICENSES properties and create a hash table.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IComponents103UmuuRequestbodiesAssignlicenserequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  name: BodyParameter
  isRequired: true
  description: |+
    .
    To construct, see NOTES section for BODYPARAMETER properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="IUsersActionsIdentity" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Identity Parameter
    To construct, see NOTES section for INPUTOBJECT properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: RemoveLicenses
  description: |+
    .

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: UserId
  isRequired: true
  description: |+
    The unique identifier of user

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.Graph.Beta.Users.Actions.Set-MgBetaUserLicense
name: Set-MgBetaUserLicense
description: |-
  Add or remove licenses for the user to enable or disable their use of Microsoft cloud offerings.
  For example, an organization can have a Microsoft 365 Enterprise E3 subscription with 100 licenses, and this request assigns one of those licenses to a specific user.
  You can also enable and disable specific plans associated with a subscription.
  To learn more about subscriptions and licenses, see this Technet article.
  To get the subscriptions available in the directory, perform a GET subscribedSkus request.
metadata:
  external help file: Microsoft.Graph.Beta.Users.Actions-help.xml
  Module Name: Microsoft.Graph.Beta.Users.Actions
  online version: https://learn.microsoft.com/powershell/module/microsoft.graph.beta.users.actions/set-mgbetauserlicense
  schema: 2.0.0
