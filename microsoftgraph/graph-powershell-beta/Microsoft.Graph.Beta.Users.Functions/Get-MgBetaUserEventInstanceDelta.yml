### YamlMime:PowershellCmdlet
summary: |-
  Get a set of event resources that have been added, deleted, or updated in one or more calendars.
  You can get specific types of these incremental changes in the events in all the calendars of a mailbox or in a specific calendar, or in an event collection of a **calendarView** (range of events defined by start and end dates) of a calendar.
  The calendar can be the default calendar or some other specified calendar of the user's.
  In the case of getting incremental changes on **calendarView**, the calendar can be a group calendar as well.
  Typically, synchronizing events in a calendar or **calendarView** in a local store entails a round of multiple **delta** function calls.
  The initial call is a full synchronization, and every subsequent **delta** call in the same round gets the incremental changes (additions, deletions, or updates).
  This allows you to maintain and synchronize a local store of events in the specified calendar, without having to fetch all the events of that calendar from the server every time.
  The following table lists the differences between the **delta** function on events and the **delta** function on a **calendarView** in a calendar.

  > [!NOTE]
  > To view the v1.0 release of this cmdlet, view [Get-MgUserEventInstanceDelta](/powershell/module/Microsoft.Graph.Users.Functions/Get-MgUserEventInstanceDelta?view=graph-powershell-v1.0)
module: Microsoft.Graph.Beta.Users.Functions
notes: |-
  ALIASES

  COMPLEX PARAMETER PROPERTIES

  To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.


  `INPUTOBJECT <IUsersFunctionsIdentity>`: Identity Parameter
    - `[AccessReviewInstanceId <String>]`: The unique identifier of accessReviewInstance
    - `[AppConsentRequestId <String>]`: The unique identifier of appConsentRequest
    - `[CalendarId <String>]`: The unique identifier of calendar
    - `[ChatId <String>]`: The unique identifier of chat
    - `[ChatMessageId <String>]`: The unique identifier of chatMessage
    - `[CloudPcId <String>]`: The unique identifier of cloudPC
    - `[ContactFolderId <String>]`: The unique identifier of contactFolder
    - `[ContactFolderId1 <String>]`: The unique identifier of contactFolder
    - `[ContentTypeId <String>]`: The unique identifier of contentType
    - `[DriveId <String>]`: The unique identifier of drive
    - `[DriveItemId <String>]`: The unique identifier of driveItem
    - `[EndDateTime <String>]`: Usage: endDateTime='{endDateTime}'
    - `[EventId <String>]`: The unique identifier of event
    - `[GroupId <String>]`: Usage: groupId='{groupId}'
    - `[IncludePersonalNotebooks <Boolean?>]`: Usage: includePersonalNotebooks={includePersonalNotebooks}
    - `[Interval <String>]`: Usage: interval='{interval}'
    - `[ListItemId <String>]`: The unique identifier of listItem
    - `[MailFolderId <String>]`: The unique identifier of mailFolder
    - `[MailFolderId1 <String>]`: The unique identifier of mailFolder
    - `[ManagedDeviceId <String>]`: The unique identifier of managedDevice
    - `[On <String>]`: Usage: on='{on}'
    - `[OnenotePageId <String>]`: The unique identifier of onenotePage
    - `[OnlineMeetingId <String>]`: The unique identifier of onlineMeeting
    - `[PlannerBucketId <String>]`: The unique identifier of plannerBucket
    - `[PlannerPlanId <String>]`: The unique identifier of plannerPlan
    - `[Q <String>]`: Usage: q='{q}'
    - `[RoomList <String>]`: Usage: RoomList='{RoomList}'
    - `[ServicePlanId <String>]`: Usage: servicePlanId='{servicePlanId}'
    - `[Skip <Int32?>]`: Usage: skip={skip}
    - `[StartDateTime <String>]`: Usage: startDateTime='{startDateTime}'
    - `[TimeZoneStandard <String>]`: Usage: TimeZoneStandard='{TimeZoneStandard}'
    - `[TodoTaskListId <String>]`: The unique identifier of todoTaskList
    - `[Token <String>]`: Usage: token='{token}'
    - `[Top <Int32?>]`: Usage: top={top}
    - `[Upn <String>]`: Usage: upn='{upn}'
    - `[User <String>]`: Usage: User='{User}'
    - `[UserId <String>]`: The unique identifier of user
inputs:
- name: <xref href="Microsoft.Graph.Beta.PowerShell.Models.IUsersFunctionsIdentity" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Graph.Beta.PowerShell.Models.IMicrosoftGraphEvent" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-MgUserEventInstanceDelta
  href: /powershell/module/Microsoft.Graph.Users.Functions/Get-MgUserEventInstanceDelta?view=graph-powershell-v1.0
syntaxes:
- >-
  Get-MgBetaUserEventInstanceDelta -EventId <String> -UserId <String> -EndDateTime <String>

   -StartDateTime <String> [-Filter <String>] [-Property <String[]>] [-Search <String>] [-Skip <Int32>]

   [-Sort <String[]>] [-Top <Int32>] [-PageSize <Int32>] [-All] [-CountVariable <String>] [<CommonParameters>]
- >-
  Get-MgBetaUserEventInstanceDelta -InputObject <IUsersFunctionsIdentity> -EndDateTime <String>

   -StartDateTime <String> [-Filter <String>] [-Property <String[]>] [-Search <String>] [-Skip <Int32>]

   [-Sort <String[]>] [-Top <Int32>] [-Count] [<CommonParameters>]
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: All
  description: |+
    List all pages.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Count
  description: |+
    Include count of items

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: CountVariable
  description: |+
    Specifies a count of the total number of items in a collection.
    By default, this variable will be set in the global scope.

  defaultValue: None
  position: Named
  aliases: CV
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: EndDateTime
  isRequired: true
  description: |+
    The end date and time of the time range in the function, represented in ISO 8601 format.
    For example, 2019-11-08T20:00:00-08:00

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: EventId
  isRequired: true
  description: |+
    The unique identifier of event

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Filter
  description: |+
    Filter items by property values

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IUsersFunctionsIdentity" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Identity Parameter
    To construct, see NOTES section for INPUTOBJECT properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Int32" data-throw-if-not-resolved="False" />
  name: PageSize
  description: |+
    Sets the page size of results.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Property
  description: |+
    Select properties to be returned

  defaultValue: None
  position: Named
  aliases: Select
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Search
  description: |+
    Search items by search phrases

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Int32" data-throw-if-not-resolved="False" />
  name: Skip
  description: |+
    Skip the first n items

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Sort
  description: |+
    Order items by property values

  defaultValue: None
  position: Named
  aliases: OrderBy
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: StartDateTime
  isRequired: true
  description: |+
    The start date and time of the time range in the function, represented in ISO 8601 format.
    For example, 2019-11-08T20:00:00-08:00

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Int32" data-throw-if-not-resolved="False" />
  name: Top
  description: |+
    Show only the first n items

  defaultValue: None
  position: Named
  aliases: Limit
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: UserId
  isRequired: true
  description: |+
    The unique identifier of user

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: Microsoft.Graph.Beta.Users.Functions.Get-MgBetaUserEventInstanceDelta
name: Get-MgBetaUserEventInstanceDelta
description: |-
  Get a set of event resources that have been added, deleted, or updated in one or more calendars.
  You can get specific types of these incremental changes in the events in all the calendars of a mailbox or in a specific calendar, or in an event collection of a **calendarView** (range of events defined by start and end dates) of a calendar.
  The calendar can be the default calendar or some other specified calendar of the user's.
  In the case of getting incremental changes on **calendarView**, the calendar can be a group calendar as well.
  Typically, synchronizing events in a calendar or **calendarView** in a local store entails a round of multiple **delta** function calls.
  The initial call is a full synchronization, and every subsequent **delta** call in the same round gets the incremental changes (additions, deletions, or updates).
  This allows you to maintain and synchronize a local store of events in the specified calendar, without having to fetch all the events of that calendar from the server every time.
  The following table lists the differences between the **delta** function on events and the **delta** function on a **calendarView** in a calendar.
metadata:
  external help file: Microsoft.Graph.Beta.Users.Functions-help.xml
  Module Name: Microsoft.Graph.Beta.Users.Functions
  online version: https://learn.microsoft.com/powershell/module/microsoft.graph.beta.users.functions/get-mgbetausereventinstancedelta
  schema: 2.0.0
