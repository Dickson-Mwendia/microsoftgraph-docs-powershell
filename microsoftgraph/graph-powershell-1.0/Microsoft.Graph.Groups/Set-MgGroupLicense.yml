### YamlMime:PowershellCmdlet
summary: |-
  Add or remove licenses on the group.
  Licenses assigned to the group will be assigned to all users in the group.
  To learn more about group-based licensing, see What is group-based licensing in Azure Active Directory.
  To get the subscriptions available in the directory, perform a GET subscribedSkus request.

  > [!NOTE]
  > To view the beta release of this cmdlet, view [Set-MgBetaGroupLicense](/powershell/module/Microsoft.Graph.Beta.Groups/Set-MgBetaGroupLicense?view=graph-powershell-beta)
module: Microsoft.Graph.Groups
notes: |-
  ALIASES

  COMPLEX PARAMETER PROPERTIES

  To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.


  `ADDLICENSES <IMicrosoftGraphAssignedLicense[]>`: .
    - `[DisabledPlans <String[]>]`: A collection of the unique identifiers for plans that have been disabled.
    - `[SkuId <String>]`: The unique identifier for the SKU.

  `BODYPARAMETER <IPaths6Fg5LiGroupsGroupIdMicrosoftGraphAssignlicensePostRequestbodyContentApplicationJsonSchema>`: .
    - `[(Any) <Object>]`: This indicates any property can be added to this object.
    - `[AddLicenses <IMicrosoftGraphAssignedLicense[]>]`: 
      - `[DisabledPlans <String[]>]`: A collection of the unique identifiers for plans that have been disabled.
      - `[SkuId <String>]`: The unique identifier for the SKU.
    - `[RemoveLicenses <String[]>]`: 

  `INPUTOBJECT <IGroupsIdentity>`: Identity Parameter
    - `[AttachmentId <String>]`: The unique identifier of attachment
    - `[ContentTypeId <String>]`: The unique identifier of contentType
    - `[ConversationId <String>]`: The unique identifier of conversation
    - `[ConversationThreadId <String>]`: The unique identifier of conversationThread
    - `[DirectoryObjectId <String>]`: The unique identifier of directoryObject
    - `[DocumentSetVersionId <String>]`: The unique identifier of documentSetVersion
    - `[DriveId <String>]`: The unique identifier of drive
    - `[DriveItemId <String>]`: The unique identifier of driveItem
    - `[DriveItemVersionId <String>]`: The unique identifier of driveItemVersion
    - `[EndDateTime <String>]`: Usage: endDateTime='{endDateTime}'
    - `[EventId <String>]`: The unique identifier of event
    - `[ExtensionId <String>]`: The unique identifier of extension
    - `[GroupId <String>]`: The unique identifier of group
    - `[GroupLifecyclePolicyId <String>]`: The unique identifier of groupLifecyclePolicy
    - `[GroupSettingId <String>]`: The unique identifier of groupSetting
    - `[GroupSettingTemplateId <String>]`: The unique identifier of groupSettingTemplate
    - `[IncludePersonalNotebooks <Boolean?>]`: Usage: includePersonalNotebooks={includePersonalNotebooks}
    - `[Interval <String>]`: Usage: interval='{interval}'
    - `[ListId <String>]`: The unique identifier of list
    - `[ListItemId <String>]`: The unique identifier of listItem
    - `[ListItemVersionId <String>]`: The unique identifier of listItemVersion
    - `[NotebookId <String>]`: The unique identifier of notebook
    - `[OnenotePageId <String>]`: The unique identifier of onenotePage
    - `[OnenoteSectionId <String>]`: The unique identifier of onenoteSection
    - `[Path <String>]`: Usage: path='{path}'
    - `[PermissionId <String>]`: The unique identifier of permission
    - `[PostId <String>]`: The unique identifier of post
    - `[ProfilePhotoId <String>]`: The unique identifier of profilePhoto
    - `[Q <String>]`: Usage: q='{q}'
    - `[ResourceSpecificPermissionGrantId <String>]`: The unique identifier of resourceSpecificPermissionGrant
    - `[SiteId <String>]`: The unique identifier of site
    - `[StartDateTime <String>]`: Usage: startDateTime='{startDateTime}'
    - `[SubscriptionId <String>]`: The unique identifier of subscription
    - `[Token <String>]`: Usage: token='{token}'
    - `[User <String>]`: Usage: User='{User}'
inputs:
- name: <xref href="Microsoft.Graph.PowerShell.Models.IGroupsIdentity" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Graph.PowerShell.Models.IPaths6Fg5LiGroupsGroupIdMicrosoftGraphAssignlicensePostRequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Graph.PowerShell.Models.IMicrosoftGraphGroup" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Set-MgBetaGroupLicense
  href: /powershell/module/Microsoft.Graph.Beta.Groups/Set-MgBetaGroupLicense?view=graph-powershell-beta
syntaxes:
- >-
  Set-MgGroupLicense -GroupId <String> [-AddLicenses <IMicrosoftGraphAssignedLicense[]>]

   [-AdditionalProperties <Hashtable>] [-RemoveLicenses <String[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-MgGroupLicense -GroupId <String>

   -BodyParameter <IPaths6Fg5LiGroupsGroupIdMicrosoftGraphAssignlicensePostRequestbodyContentApplicationJsonSchema>

   [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-MgGroupLicense -InputObject <IGroupsIdentity> [-AddLicenses <IMicrosoftGraphAssignedLicense[]>]

   [-AdditionalProperties <Hashtable>] [-RemoveLicenses <String[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-MgGroupLicense -InputObject <IGroupsIdentity>

   -BodyParameter <IPaths6Fg5LiGroupsGroupIdMicrosoftGraphAssignlicensePostRequestbodyContentApplicationJsonSchema>

   [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Using the Set-MgGroupLicense Cmdlet'
  code: |-
    Import-Module Microsoft.Graph.Groups
    $params = @{
    	AddLicenses = @(
    		@{
    			DisabledPlans = @(
    				"113feb6c-3fe4-4440-bddc-54d774bf0318"
    				"14ab5db5-e6c4-4b20-b4bc-13e36fd2227f"
    			)
    			SkuId = "b05e124f-c7cc-45a0-a6aa-8cf78c946968"
    		}
    		@{
    			DisabledPlans = @(
    				"a413a9ff-720c-4822-98ef-2f37c2a21f4c"
    			)
    			SkuId = "c7df2760-2c81-4ef7-b578-5b5392b571df"
    		}
    	)
    	RemoveLicenses = @(
    	)
    }
    Set-MgGroupLicense -GroupId $groupId -BodyParameter $params
  description: |-
    This example shows how to use the Set-MgGroupLicense Cmdlet.
    To learn about permissions for this resource, see the [permissions reference](/graph/permissions-reference).
  summary: ""
- title: 'Example 2: Using the Set-MgGroupLicense Cmdlet'
  code: |-
    Import-Module Microsoft.Graph.Groups
    $params = @{
    	AddLicenses = @(
    	)
    	RemoveLicenses = @(
    		"c7df2760-2c81-4ef7-b578-5b5392b571df"
    		"b05e124f-c7cc-45a0-a6aa-8cf78c946968"
    	)
    }
    Set-MgGroupLicense -GroupId $groupId -BodyParameter $params
  description: |-
    This example shows how to use the Set-MgGroupLicense Cmdlet.
    To learn about permissions for this resource, see the [permissions reference](/graph/permissions-reference).
  summary: ""
parameters:
- type: <xref href="Hashtable" data-throw-if-not-resolved="False" />
  name: AdditionalProperties
  description: |+
    Additional Parameters

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IMicrosoftGraphAssignedLicense" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: AddLicenses
  description: |+
    .
    To construct, see NOTES section for ADDLICENSES properties and create a hash table.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IPaths6Fg5LiGroupsGroupIdMicrosoftGraphAssignlicensePostRequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  name: BodyParameter
  isRequired: true
  description: |+
    .
    To construct, see NOTES section for BODYPARAMETER properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: GroupId
  isRequired: true
  description: |+
    The unique identifier of group

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IGroupsIdentity" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Identity Parameter
    To construct, see NOTES section for INPUTOBJECT properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: RemoveLicenses
  description: |+
    .

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.Graph.Groups.Set-MgGroupLicense
name: Set-MgGroupLicense
description: |-
  Add or remove licenses on the group.
  Licenses assigned to the group will be assigned to all users in the group.
  To learn more about group-based licensing, see What is group-based licensing in Azure Active Directory.
  To get the subscriptions available in the directory, perform a GET subscribedSkus request.
metadata:
  external help file: Microsoft.Graph.Groups-help.xml
  Module Name: Microsoft.Graph.Groups
  online version: https://learn.microsoft.com/powershell/module/microsoft.graph.groups/set-mggrouplicense
  schema: 2.0.0
