### YamlMime:PowershellCmdlet
summary: |-
  Add a key credential to an application.
  This method, along with removeKey can be used by an application to automate rolling its expiring keys.
  As part of the request validation for this method, a proof of possession of an existing key is verified before the action can be performed.
  Applications that don't have any existing valid certificates (no certificates have been added yet, or all certificates have expired), won't be able to use this service action.
  You can use the Update application operation to perform an update instead.

  > [!NOTE]
  > To view the beta release of this cmdlet, view [Add-MgBetaApplicationKey](/powershell/module/Microsoft.Graph.Beta.Applications/Add-MgBetaApplicationKey?view=graph-powershell-beta)
module: Microsoft.Graph.Applications
notes: |-
  ALIASES

  COMPLEX PARAMETER PROPERTIES

  To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.


  `BODYPARAMETER <IPaths17CrvdcApplicationsApplicationIdMicrosoftGraphAddkeyPostRequestbodyContentApplicationJsonSchema>`: .
    - `[(Any) <Object>]`: This indicates any property can be added to this object.
    - `[KeyCredential <IMicrosoftGraphKeyCredential>]`: keyCredential
      - `[(Any) <Object>]`: This indicates any property can be added to this object.
      - `[CustomKeyIdentifier <Byte[]>]`: A 40-character binary type that can be used to identify the credential. Optional. When not provided in the payload, defaults to the thumbprint of the certificate.
      - `[DisplayName <String>]`: Friendly name for the key. Optional.
      - `[EndDateTime <DateTime?>]`: The date and time at which the credential expires. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
      - `[Key <Byte[]>]`: The certificate's raw data in byte array converted to Base64 string. Returned only on $select for a single object, that is, GET applications/{applicationId}?$select=keyCredentials or GET servicePrincipals/{servicePrincipalId}?$select=keyCredentials; otherwise, it is always null.  From a .cer certificate, you can read the key using the Convert.ToBase64String() method. For more information, see Get the certificate key.
      - `[KeyId <String>]`: The unique identifier (GUID) for the key.
      - `[StartDateTime <DateTime?>]`: The date and time at which the credential becomes valid.The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
      - `[Type <String>]`: The type of key credential; for example, Symmetric, AsymmetricX509Cert.
      - `[Usage <String>]`: A string that describes the purpose for which the key can be used; for example, Verify.
    - `[PasswordCredential <IMicrosoftGraphPasswordCredential>]`: passwordCredential
      - `[(Any) <Object>]`: This indicates any property can be added to this object.
      - `[CustomKeyIdentifier <Byte[]>]`: Do not use.
      - `[DisplayName <String>]`: Friendly name for the password. Optional.
      - `[EndDateTime <DateTime?>]`: The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
      - `[Hint <String>]`: Contains the first three characters of the password. Read-only.
      - `[KeyId <String>]`: The unique identifier for the password.
      - `[SecretText <String>]`: Read-only; Contains the strong passwords generated by Azure AD that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future.
      - `[StartDateTime <DateTime?>]`: The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
    - `[Proof <String>]`: 

  `INPUTOBJECT <IApplicationsIdentity>`: Identity Parameter
    - `[AppId <String>]`: Alternate key of application
    - `[AppManagementPolicyId <String>]`: The unique identifier of appManagementPolicy
    - `[AppRoleAssignmentId <String>]`: The unique identifier of appRoleAssignment
    - `[ApplicationId <String>]`: The unique identifier of application
    - `[ApplicationTemplateId <String>]`: The unique identifier of applicationTemplate
    - `[ClaimsMappingPolicyId <String>]`: The unique identifier of claimsMappingPolicy
    - `[DelegatedPermissionClassificationId <String>]`: The unique identifier of delegatedPermissionClassification
    - `[DirectoryDefinitionId <String>]`: The unique identifier of directoryDefinition
    - `[DirectoryObjectId <String>]`: The unique identifier of directoryObject
    - `[EndpointId <String>]`: The unique identifier of endpoint
    - `[ExtensionPropertyId <String>]`: The unique identifier of extensionProperty
    - `[FederatedIdentityCredentialId <String>]`: The unique identifier of federatedIdentityCredential
    - `[GroupId <String>]`: The unique identifier of group
    - `[HomeRealmDiscoveryPolicyId <String>]`: The unique identifier of homeRealmDiscoveryPolicy
    - `[OAuth2PermissionGrantId <String>]`: The unique identifier of oAuth2PermissionGrant
    - `[ServicePrincipalId <String>]`: The unique identifier of servicePrincipal
    - `[SynchronizationJobId <String>]`: The unique identifier of synchronizationJob
    - `[SynchronizationTemplateId <String>]`: The unique identifier of synchronizationTemplate
    - `[TokenIssuancePolicyId <String>]`: The unique identifier of tokenIssuancePolicy
    - `[TokenLifetimePolicyId <String>]`: The unique identifier of tokenLifetimePolicy
    - `[UserId <String>]`: The unique identifier of user

  `KEYCREDENTIAL <IMicrosoftGraphKeyCredential>`: keyCredential
    - `[(Any) <Object>]`: This indicates any property can be added to this object.
    - `[CustomKeyIdentifier <Byte[]>]`: A 40-character binary type that can be used to identify the credential. Optional. When not provided in the payload, defaults to the thumbprint of the certificate.
    - `[DisplayName <String>]`: Friendly name for the key. Optional.
    - `[EndDateTime <DateTime?>]`: The date and time at which the credential expires. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    - `[Key <Byte[]>]`: The certificate's raw data in byte array converted to Base64 string. Returned only on $select for a single object, that is, GET applications/{applicationId}?$select=keyCredentials or GET servicePrincipals/{servicePrincipalId}?$select=keyCredentials; otherwise, it is always null.  From a .cer certificate, you can read the key using the Convert.ToBase64String() method. For more information, see Get the certificate key.
    - `[KeyId <String>]`: The unique identifier (GUID) for the key.
    - `[StartDateTime <DateTime?>]`: The date and time at which the credential becomes valid.The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
    - `[Type <String>]`: The type of key credential; for example, Symmetric, AsymmetricX509Cert.
    - `[Usage <String>]`: A string that describes the purpose for which the key can be used; for example, Verify.

  `PASSWORDCREDENTIAL <IMicrosoftGraphPasswordCredential>`: passwordCredential
    - `[(Any) <Object>]`: This indicates any property can be added to this object.
    - `[CustomKeyIdentifier <Byte[]>]`: Do not use.
    - `[DisplayName <String>]`: Friendly name for the password. Optional.
    - `[EndDateTime <DateTime?>]`: The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
    - `[Hint <String>]`: Contains the first three characters of the password. Read-only.
    - `[KeyId <String>]`: The unique identifier for the password.
    - `[SecretText <String>]`: Read-only; Contains the strong passwords generated by Azure AD that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future.
    - `[StartDateTime <DateTime?>]`: The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
inputs:
- name: <xref href="Microsoft.Graph.PowerShell.Models.IApplicationsIdentity" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Graph.PowerShell.Models.IPaths17CrvdcApplicationsApplicationIdMicrosoftGraphAddkeyPostRequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Graph.PowerShell.Models.IMicrosoftGraphKeyCredential" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Add-MgBetaApplicationKey
  href: /powershell/module/Microsoft.Graph.Beta.Applications/Add-MgBetaApplicationKey?view=graph-powershell-beta
syntaxes:
- >-
  Add-MgApplicationKey -ApplicationId <String> [-AdditionalProperties <Hashtable>]

   [-KeyCredential <IMicrosoftGraphKeyCredential>] [-PasswordCredential <IMicrosoftGraphPasswordCredential>]

   [-Proof <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-MgApplicationKey -ApplicationId <String>

   -BodyParameter <IPaths17CrvdcApplicationsApplicationIdMicrosoftGraphAddkeyPostRequestbodyContentApplicationJsonSchema>

   [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-MgApplicationKey -InputObject <IApplicationsIdentity> [-AdditionalProperties <Hashtable>]

   [-KeyCredential <IMicrosoftGraphKeyCredential>] [-PasswordCredential <IMicrosoftGraphPasswordCredential>]

   [-Proof <String>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-MgApplicationKey -InputObject <IApplicationsIdentity>

   -BodyParameter <IPaths17CrvdcApplicationsApplicationIdMicrosoftGraphAddkeyPostRequestbodyContentApplicationJsonSchema>

   [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Using the Add-MgApplicationKey Cmdlet'
  code: |-
    Import-Module Microsoft.Graph.Applications
    $params = @{
    	KeyCredential = @{
    		Type = "AsymmetricX509Cert"
    		Usage = "Verify"
    		Key = [System.Text.Encoding]::ASCII.GetBytes("MIIDYDCCAki...")
    	}
    	PasswordCredential = $null
    	Proof = "eyJ0eXAiOiJ..."
    }
    Add-MgApplicationKey -ApplicationId $applicationId -BodyParameter $params
  description: |-
    This example shows how to use the Add-MgApplicationKey Cmdlet.
    To learn about permissions for this resource, see the [permissions reference](/graph/permissions-reference).
  summary: ""
- title: 'Example 2: Using the Add-MgApplicationKey Cmdlet'
  code: |-
    Import-Module Microsoft.Graph.Applications
    $params = @{
    	KeyCredential = @{
    		Type = "X509CertAndPassword"
    		Usage = "Sign"
    		Key = [System.Text.Encoding]::ASCII.GetBytes("MIIDYDCCAki...")
    	}
    	PasswordCredential = @{
    		SecretText = "MKTr0w1..."
    	}
    	Proof = "eyJ0eXAiOiJ..."
    }
    Add-MgApplicationKey -ApplicationId $applicationId -BodyParameter $params
  description: |-
    This example shows how to use the Add-MgApplicationKey Cmdlet.
    To learn about permissions for this resource, see the [permissions reference](/graph/permissions-reference).
  summary: ""
parameters:
- type: <xref href="Hashtable" data-throw-if-not-resolved="False" />
  name: AdditionalProperties
  description: |+
    Additional Parameters

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ApplicationId
  isRequired: true
  description: |+
    The unique identifier of application

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IPaths17CrvdcApplicationsApplicationIdMicrosoftGraphAddkeyPostRequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  name: BodyParameter
  isRequired: true
  description: |+
    .
    To construct, see NOTES section for BODYPARAMETER properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="IApplicationsIdentity" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Identity Parameter
    To construct, see NOTES section for INPUTOBJECT properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IMicrosoftGraphKeyCredential" data-throw-if-not-resolved="False" />
  name: KeyCredential
  description: |+
    keyCredential
    To construct, see NOTES section for KEYCREDENTIAL properties and create a hash table.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IMicrosoftGraphPasswordCredential" data-throw-if-not-resolved="False" />
  name: PasswordCredential
  description: |+
    passwordCredential
    To construct, see NOTES section for PASSWORDCREDENTIAL properties and create a hash table.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Proof
  description: |+
    .

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.Graph.Applications.Add-MgApplicationKey
name: Add-MgApplicationKey
description: |-
  Add a key credential to an application.
  This method, along with removeKey can be used by an application to automate rolling its expiring keys.
  As part of the request validation for this method, a proof of possession of an existing key is verified before the action can be performed.
  Applications that don't have any existing valid certificates (no certificates have been added yet, or all certificates have expired), won't be able to use this service action.
  You can use the Update application operation to perform an update instead.
metadata:
  external help file: Microsoft.Graph.Applications-help.xml
  Module Name: Microsoft.Graph.Applications
  online version: https://learn.microsoft.com/powershell/module/microsoft.graph.applications/add-mgapplicationkey
  schema: 2.0.0
