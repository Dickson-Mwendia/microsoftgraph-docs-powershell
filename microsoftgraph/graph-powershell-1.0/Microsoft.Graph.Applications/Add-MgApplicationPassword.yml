### YamlMime:PowershellCmdlet
summary: |-
  Adds a strong password or secret to an application.

  > [!NOTE]
  > To view the beta release of this cmdlet, view [Add-MgBetaApplicationPassword](/powershell/module/Microsoft.Graph.Beta.Applications/Add-MgBetaApplicationPassword?view=graph-powershell-beta)
module: Microsoft.Graph.Applications
notes: |-
  ALIASES

  COMPLEX PARAMETER PROPERTIES

  To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.


  `BODYPARAMETER <IPaths141Ryo0ApplicationsApplicationIdMicrosoftGraphAddpasswordPostRequestbodyContentApplicationJsonSchema>`: .
    - `[(Any) <Object>]`: This indicates any property can be added to this object.
    - `[PasswordCredential <IMicrosoftGraphPasswordCredential>]`: passwordCredential
      - `[(Any) <Object>]`: This indicates any property can be added to this object.
      - `[CustomKeyIdentifier <Byte[]>]`: Do not use.
      - `[DisplayName <String>]`: Friendly name for the password. Optional.
      - `[EndDateTime <DateTime?>]`: The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
      - `[Hint <String>]`: Contains the first three characters of the password. Read-only.
      - `[KeyId <String>]`: The unique identifier for the password.
      - `[SecretText <String>]`: Read-only; Contains the strong passwords generated by Azure AD that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future.
      - `[StartDateTime <DateTime?>]`: The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.

  `INPUTOBJECT <IApplicationsIdentity>`: Identity Parameter
    - `[AppId <String>]`: Alternate key of application
    - `[AppManagementPolicyId <String>]`: The unique identifier of appManagementPolicy
    - `[AppRoleAssignmentId <String>]`: The unique identifier of appRoleAssignment
    - `[ApplicationId <String>]`: The unique identifier of application
    - `[ApplicationTemplateId <String>]`: The unique identifier of applicationTemplate
    - `[ClaimsMappingPolicyId <String>]`: The unique identifier of claimsMappingPolicy
    - `[DelegatedPermissionClassificationId <String>]`: The unique identifier of delegatedPermissionClassification
    - `[DirectoryDefinitionId <String>]`: The unique identifier of directoryDefinition
    - `[DirectoryObjectId <String>]`: The unique identifier of directoryObject
    - `[EndpointId <String>]`: The unique identifier of endpoint
    - `[ExtensionPropertyId <String>]`: The unique identifier of extensionProperty
    - `[FederatedIdentityCredentialId <String>]`: The unique identifier of federatedIdentityCredential
    - `[GroupId <String>]`: The unique identifier of group
    - `[HomeRealmDiscoveryPolicyId <String>]`: The unique identifier of homeRealmDiscoveryPolicy
    - `[OAuth2PermissionGrantId <String>]`: The unique identifier of oAuth2PermissionGrant
    - `[ServicePrincipalId <String>]`: The unique identifier of servicePrincipal
    - `[SynchronizationJobId <String>]`: The unique identifier of synchronizationJob
    - `[SynchronizationTemplateId <String>]`: The unique identifier of synchronizationTemplate
    - `[TokenIssuancePolicyId <String>]`: The unique identifier of tokenIssuancePolicy
    - `[TokenLifetimePolicyId <String>]`: The unique identifier of tokenLifetimePolicy
    - `[UserId <String>]`: The unique identifier of user

  `PASSWORDCREDENTIAL <IMicrosoftGraphPasswordCredential>`: passwordCredential
    - `[(Any) <Object>]`: This indicates any property can be added to this object.
    - `[CustomKeyIdentifier <Byte[]>]`: Do not use.
    - `[DisplayName <String>]`: Friendly name for the password. Optional.
    - `[EndDateTime <DateTime?>]`: The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
    - `[Hint <String>]`: Contains the first three characters of the password. Read-only.
    - `[KeyId <String>]`: The unique identifier for the password.
    - `[SecretText <String>]`: Read-only; Contains the strong passwords generated by Azure AD that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future.
    - `[StartDateTime <DateTime?>]`: The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
inputs:
- name: <xref href="Microsoft.Graph.PowerShell.Models.IApplicationsIdentity" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Graph.PowerShell.Models.IPaths141Ryo0ApplicationsApplicationIdMicrosoftGraphAddpasswordPostRequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Graph.PowerShell.Models.IMicrosoftGraphPasswordCredential" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Add-MgBetaApplicationPassword
  href: /powershell/module/Microsoft.Graph.Beta.Applications/Add-MgBetaApplicationPassword?view=graph-powershell-beta
syntaxes:
- >-
  Add-MgApplicationPassword -ApplicationId <String> [-AdditionalProperties <Hashtable>]

   [-PasswordCredential <IMicrosoftGraphPasswordCredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-MgApplicationPassword -ApplicationId <String>

   -BodyParameter <IPaths141Ryo0ApplicationsApplicationIdMicrosoftGraphAddpasswordPostRequestbodyContentApplicationJsonSchema>

   [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-MgApplicationPassword -InputObject <IApplicationsIdentity> [-AdditionalProperties <Hashtable>]

   [-PasswordCredential <IMicrosoftGraphPasswordCredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-MgApplicationPassword -InputObject <IApplicationsIdentity>

   -BodyParameter <IPaths141Ryo0ApplicationsApplicationIdMicrosoftGraphAddpasswordPostRequestbodyContentApplicationJsonSchema>

   [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Add a password credential to an application with a six month expiry'
  code: |-
    Connect-MgGraph -Scopes 'Application.ReadWrite.All'

    $appObjectId = 'eaf1e531-0d58-4874-babe-b9a9f436e6c3'

    $passwordCred = @{
       displayName = 'Created in PowerShell'
       endDateTime = (Get-Date).AddMonths(6)
    }

    $secret = Add-MgApplicationPassword -applicationId $appObjectId -PasswordCredential $passwordCred
    $secret | Format-List

    CustomKeyIdentifier  :
    DisplayName          : Created in PowerShell
    EndDateTime          : 26/11/2022 12:03:31 pm
    Hint                 : Q_e
    KeyId                : c82bb763-741b-4575-9d9d-df7e766f6999
    SecretText           : Q_e8Q~ZDWJD.bkgajbREp-VFFUayCuEk8b1hDcr9
    StartDateTime        : 26/5/2022 1:03:31 pm
    AdditionalProperties : {[@odata.context,
                           https://graph.microsoft.com/v1.0/$metadata#microsoft.graph.passwordCredential]}
  description: |-
    Add a password to an application that expires in six months from the current date.
  summary: ""
- title: 'Example 2: Add a password credential to an application with a start date'
  code: |-
    Connect-MgGraph -Scopes 'Application.ReadWrite.All'

    $appObjectId = 'eaf1e531-0d58-4874-babe-b9a9f436e6c3'

    $startDate = (Get-Date).AddDays(1).Date
    $endDate = $startDate.AddMonths(6)

    $passwordCred = @{
       displayName = 'Created in PowerShell'
       startDateTime = $startDate
       endDateTime = $endDate
    }

    $secret = Add-MgApplicationPassword -applicationId $appObjectId -PasswordCredential $passwordCred
    $secret | Format-List

    CustomKeyIdentifier  :
    DisplayName          : Created in PowerShell
    EndDateTime          : 26/11/2022 1:00:00 pm
    Hint                 : TiA
    KeyId                : 082bf20f-63d6-4970-bb4e-55e504f50d8b
    SecretText           : TiA8Q~Zs7ej1cGtlW0qnmuFi~JlxXTZew_tU1bGA
    StartDateTime        : 26/5/2022 2:00:00 pm
    AdditionalProperties : {[@odata.context,
                           https://graph.microsoft.com/v1.0/$metadata#microsoft.graph.passwordCredential]}
  description: |-
    Add a password to an application that becomes valid at 12:00 am the next day and is valid for six months.

    Use `$secret.StartDateTime.ToLocalTime()` to convert the returned dates from UTC to the local timezone.
  summary: ""
parameters:
- type: <xref href="Hashtable" data-throw-if-not-resolved="False" />
  name: AdditionalProperties
  description: |+
    Additional Parameters

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ApplicationId
  isRequired: true
  description: |+
    The unique identifier of application

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IPaths141Ryo0ApplicationsApplicationIdMicrosoftGraphAddpasswordPostRequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  name: BodyParameter
  isRequired: true
  description: |+
    .
    To construct, see NOTES section for BODYPARAMETER properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="IApplicationsIdentity" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Identity Parameter
    To construct, see NOTES section for INPUTOBJECT properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IMicrosoftGraphPasswordCredential" data-throw-if-not-resolved="False" />
  name: PasswordCredential
  description: |+
    passwordCredential
    To construct, see NOTES section for PASSWORDCREDENTIAL properties and create a hash table.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.Graph.Applications.Add-MgApplicationPassword
name: Add-MgApplicationPassword
description: |-
  Adds a strong password or secret to an application.
metadata:
  external help file: Microsoft.Graph.Applications-help.xml
  Module Name: Microsoft.Graph.Applications
  online version: https://learn.microsoft.com/powershell/module/microsoft.graph.applications/add-mgapplicationpassword
  schema: 2.0.0
