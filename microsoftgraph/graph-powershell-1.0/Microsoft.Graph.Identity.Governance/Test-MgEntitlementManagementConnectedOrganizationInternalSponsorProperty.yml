### YamlMime:PowershellCmdlet
summary: |-
  Validate that a Microsoft 365 group's display name or mail nickname complies with naming policies.
  Clients can use this API to determine whether a display name or mail nickname is valid before trying to create a Microsoft 365 group.
  To validate the properties of an existing group, use the group: validateProperties function.
  The following policy validations are performed for the display name and mail nickname properties:\n1.
  Validate the prefix and suffix naming policy\n2.
  Validate the custom banned words policy\n3.
  Validate that the mail nickname is unique This API only returns the first validation failure that is encountered.
  If the properties fail multiple validations, only the first validation failure is returned.
  However, you can validate both the mail nickname and the display name and receive a collection of validation errors if you are only validating the prefix and suffix naming policy.
  To learn more about configuring naming policies, see Configure naming policy.

  > [!NOTE]
  > To view the beta release of this cmdlet, view [Test-MgBetaEntitlementManagementConnectedOrganizationInternalSponsorProperty](/powershell/module/Microsoft.Graph.Beta.Identity.Governance/Test-MgBetaEntitlementManagementConnectedOrganizationInternalSponsorProperty?view=graph-powershell-beta)
module: Microsoft.Graph.Identity.Governance
notes: |-
  ALIASES

  COMPLEX PARAMETER PROPERTIES

  To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.


  `BODYPARAMETER <IPathsXlfvw0IdentitygovernanceEntitlementmanagementConnectedorganizationsConnectedorganizationIdInternalsponsorsMicrosoftGraphValidatepropertiesPostRequestbodyContentApplicationJsonSchema>`: .
    - `[(Any) <Object>]`: This indicates any property can be added to this object.
    - `[DisplayName <String>]`: 
    - `[EntityType <String>]`: 
    - `[MailNickname <String>]`: 
    - `[OnBehalfOfUserId <String>]`: 

  `INPUTOBJECT <IIdentityGovernanceIdentity>`: Identity Parameter
    - `[AccessPackageAssignmentId <String>]`: The unique identifier of accessPackageAssignment
    - `[AccessPackageAssignmentPolicyId <String>]`: The unique identifier of accessPackageAssignmentPolicy
    - `[AccessPackageAssignmentRequestId <String>]`: The unique identifier of accessPackageAssignmentRequest
    - `[AccessPackageCatalogId <String>]`: The unique identifier of accessPackageCatalog
    - `[AccessPackageId <String>]`: The unique identifier of accessPackage
    - `[AccessPackageId1 <String>]`: The unique identifier of accessPackage
    - `[AccessPackageQuestionId <String>]`: The unique identifier of accessPackageQuestion
    - `[AccessPackageResourceEnvironmentId <String>]`: The unique identifier of accessPackageResourceEnvironment
    - `[AccessPackageResourceId <String>]`: The unique identifier of accessPackageResource
    - `[AccessPackageResourceRequestId <String>]`: The unique identifier of accessPackageResourceRequest
    - `[AccessPackageResourceRoleId <String>]`: The unique identifier of accessPackageResourceRole
    - `[AccessPackageResourceRoleId1 <String>]`: The unique identifier of accessPackageResourceRole
    - `[AccessPackageResourceRoleScopeId <String>]`: The unique identifier of accessPackageResourceRoleScope
    - `[AccessPackageResourceScopeId <String>]`: The unique identifier of accessPackageResourceScope
    - `[AccessPackageResourceScopeId1 <String>]`: The unique identifier of accessPackageResourceScope
    - `[AccessReviewHistoryDefinitionId <String>]`: The unique identifier of accessReviewHistoryDefinition
    - `[AccessReviewHistoryInstanceId <String>]`: The unique identifier of accessReviewHistoryInstance
    - `[AccessReviewInstanceDecisionItemId <String>]`: The unique identifier of accessReviewInstanceDecisionItem
    - `[AccessReviewInstanceId <String>]`: The unique identifier of accessReviewInstance
    - `[AccessReviewReviewerId <String>]`: The unique identifier of accessReviewReviewer
    - `[AccessReviewScheduleDefinitionId <String>]`: The unique identifier of accessReviewScheduleDefinition
    - `[AccessReviewStageId <String>]`: The unique identifier of accessReviewStage
    - `[AgreementAcceptanceId <String>]`: The unique identifier of agreementAcceptance
    - `[AgreementFileLocalizationId <String>]`: The unique identifier of agreementFileLocalization
    - `[AgreementFileVersionId <String>]`: The unique identifier of agreementFileVersion
    - `[AgreementId <String>]`: The unique identifier of agreement
    - `[AppConsentRequestId <String>]`: The unique identifier of appConsentRequest
    - `[ApprovalId <String>]`: The unique identifier of approval
    - `[ApprovalStageId <String>]`: The unique identifier of approvalStage
    - `[ConnectedOrganizationId <String>]`: The unique identifier of connectedOrganization
    - `[CustomCalloutExtensionId <String>]`: The unique identifier of customCalloutExtension
    - `[CustomExtensionStageSettingId <String>]`: The unique identifier of customExtensionStageSetting
    - `[CustomTaskExtensionId <String>]`: The unique identifier of customTaskExtension
    - `[DirectoryObjectId <String>]`: The unique identifier of directoryObject
    - `[EndDateTime <DateTime?>]`: Usage: endDateTime={endDateTime}
    - `[GovernanceInsightId <String>]`: The unique identifier of governanceInsight
    - `[GroupId <String>]`: The unique identifier of group
    - `[IncompatibleAccessPackageId <String>]`: Usage: incompatibleAccessPackageId='{incompatibleAccessPackageId}'
    - `[On <String>]`: Usage: on='{on}'
    - `[RunId <String>]`: The unique identifier of run
    - `[StartDateTime <DateTime?>]`: Usage: startDateTime={startDateTime}
    - `[TaskDefinitionId <String>]`: The unique identifier of taskDefinition
    - `[TaskId <String>]`: The unique identifier of task
    - `[TaskProcessingResultId <String>]`: The unique identifier of taskProcessingResult
    - `[TaskReportId <String>]`: The unique identifier of taskReport
    - `[UnifiedRbacResourceActionId <String>]`: The unique identifier of unifiedRbacResourceAction
    - `[UnifiedRbacResourceNamespaceId <String>]`: The unique identifier of unifiedRbacResourceNamespace
    - `[UnifiedRoleAssignmentId <String>]`: The unique identifier of unifiedRoleAssignment
    - `[UnifiedRoleAssignmentScheduleId <String>]`: The unique identifier of unifiedRoleAssignmentSchedule
    - `[UnifiedRoleAssignmentScheduleInstanceId <String>]`: The unique identifier of unifiedRoleAssignmentScheduleInstance
    - `[UnifiedRoleAssignmentScheduleRequestId <String>]`: The unique identifier of unifiedRoleAssignmentScheduleRequest
    - `[UnifiedRoleDefinitionId <String>]`: The unique identifier of unifiedRoleDefinition
    - `[UnifiedRoleDefinitionId1 <String>]`: The unique identifier of unifiedRoleDefinition
    - `[UnifiedRoleEligibilityScheduleId <String>]`: The unique identifier of unifiedRoleEligibilitySchedule
    - `[UnifiedRoleEligibilityScheduleInstanceId <String>]`: The unique identifier of unifiedRoleEligibilityScheduleInstance
    - `[UnifiedRoleEligibilityScheduleRequestId <String>]`: The unique identifier of unifiedRoleEligibilityScheduleRequest
    - `[UserConsentRequestId <String>]`: The unique identifier of userConsentRequest
    - `[UserId <String>]`: The unique identifier of user
    - `[UserProcessingResultId <String>]`: The unique identifier of userProcessingResult
    - `[WorkflowId <String>]`: The unique identifier of workflow
    - `[WorkflowTemplateId <String>]`: The unique identifier of workflowTemplate
    - `[WorkflowVersionNumber <Int32?>]`: The unique identifier of workflowVersion
inputs:
- name: <xref href="Microsoft.Graph.PowerShell.Models.IIdentityGovernanceIdentity" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Graph.PowerShell.Models.IPathsXlfvw0IdentitygovernanceEntitlementmanagementConnectedorganizationsConnectedorganizationIdInternalsponsorsMicrosoftGraphValidatepropertiesPostRequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="System.Boolean" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Test-MgBetaEntitlementManagementConnectedOrganizationInternalSponsorProperty
  href: /powershell/module/Microsoft.Graph.Beta.Identity.Governance/Test-MgBetaEntitlementManagementConnectedOrganizationInternalSponsorProperty?view=graph-powershell-beta
syntaxes:
- >-
  Test-MgEntitlementManagementConnectedOrganizationInternalSponsorProperty -ConnectedOrganizationId <String>

   [-AdditionalProperties <Hashtable>] [-DisplayName <String>] [-EntityType <String>] [-MailNickname <String>]

   [-OnBehalfOfUserId <String>] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Test-MgEntitlementManagementConnectedOrganizationInternalSponsorProperty -ConnectedOrganizationId <String>

   -BodyParameter <IPathsXlfvw0IdentitygovernanceEntitlementmanagementConnectedorganizationsConnectedorganizationIdInternalsponsorsMicrosoftGraphValidatepropertiesPostRequestbodyContentApplicationJsonSchema>

   [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Test-MgEntitlementManagementConnectedOrganizationInternalSponsorProperty

   -InputObject <IIdentityGovernanceIdentity> [-AdditionalProperties <Hashtable>] [-DisplayName <String>]

   [-EntityType <String>] [-MailNickname <String>] [-OnBehalfOfUserId <String>] [-PassThru] [-WhatIf] [-Confirm]

   [<CommonParameters>]
- >-
  Test-MgEntitlementManagementConnectedOrganizationInternalSponsorProperty

   -InputObject <IIdentityGovernanceIdentity>

   -BodyParameter <IPathsXlfvw0IdentitygovernanceEntitlementmanagementConnectedorganizationsConnectedorganizationIdInternalsponsorsMicrosoftGraphValidatepropertiesPostRequestbodyContentApplicationJsonSchema>

   [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Code snippet'
  code: |-
    Import-Module Microsoft.Graph.DirectoryObjects

    $params = @{
    	EntityType = "Group"
    	DisplayName = "Myprefix_test_mysuffix"
    	MailNickname = "Myprefix_test_mysuffix"
    	OnBehalfOfUserId = "onBehalfOfUserId-value"
    }

    Test-MgDirectoryObjectProperty -BodyParameter $params
  description: |-
    This example shows how to use the Test-MgEntitlementManagementConnectedOrganizationInternalSponsorProperty Cmdlet.

    To learn about permissions for this resource, see the [permissions reference](/graph/permissions-reference).
  summary: ""
parameters:
- type: <xref href="Hashtable" data-throw-if-not-resolved="False" />
  name: AdditionalProperties
  description: |+
    Additional Parameters

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IPathsXlfvw0IdentitygovernanceEntitlementmanagementConnectedorganizationsConnectedorganizationIdInternalsponsorsMicrosoftGraphValidatepropertiesPostRequestbodyContentApplicationJsonSchema" data-throw-if-not-resolved="False" />
  name: BodyParameter
  isRequired: true
  description: |+
    .
    To construct, see NOTES section for BODYPARAMETER properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ConnectedOrganizationId
  isRequired: true
  description: |+
    The unique identifier of connectedOrganization

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: DisplayName
  description: |+
    .

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: EntityType
  description: |+
    .

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="IIdentityGovernanceIdentity" data-throw-if-not-resolved="False" />
  name: InputObject
  isRequired: true
  description: |+
    Identity Parameter
    To construct, see NOTES section for INPUTOBJECT properties and create a hash table.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: MailNickname
  description: |+
    .

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: OnBehalfOfUserId
  description: |+
    .

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns true when the command succeeds

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.Graph.Identity.Governance.Test-MgEntitlementManagementConnectedOrganizationInternalSponsorProperty
name: Test-MgEntitlementManagementConnectedOrganizationInternalSponsorProperty
description: |-
  Validate that a Microsoft 365 group's display name or mail nickname complies with naming policies.
  Clients can use this API to determine whether a display name or mail nickname is valid before trying to create a Microsoft 365 group.
  To validate the properties of an existing group, use the group: validateProperties function.
  The following policy validations are performed for the display name and mail nickname properties:\n1.
  Validate the prefix and suffix naming policy\n2.
  Validate the custom banned words policy\n3.
  Validate that the mail nickname is unique This API only returns the first validation failure that is encountered.
  If the properties fail multiple validations, only the first validation failure is returned.
  However, you can validate both the mail nickname and the display name and receive a collection of validation errors if you are only validating the prefix and suffix naming policy.
  To learn more about configuring naming policies, see Configure naming policy.
metadata:
  external help file: Microsoft.Graph.Identity.Governance-help.xml
  Module Name: Microsoft.Graph.Identity.Governance
  online version: https://learn.microsoft.com/powershell/module/microsoft.graph.identity.governance/test-mgentitlementmanagementconnectedorganizationinternalsponsorproperty
  schema: 2.0.0
